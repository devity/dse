#!/usr/bin/php
<?
ini_set('display_errors','On');	
error_reporting(E_ALL & ~E_NOTICE);
$RunTime=60;
$Start=time();
$Threads=5;
$Verbosity=3;

$In="/dse/bin/stress_urls.txt";
$Log="/var/log/http_stress.log";
$ThreadLog="/tmp/http_stress.thread.log";


$Script=$argv[0];


$parameters = array(
  'h' => 'help',
  't:' => 'threads',
  'q' => 'quiet',
  's' => 'subprocess',
  'v:' => 'verbosity:',
  'r:' => 'runtime:',
);
$flag_help_lines = array(
  'h' => "\thelp - this message",
  't:' => "\tthreads - # of threads to run simultaniously",
  'q' => "quiet - same as -v 0",
  's' => "subprocess - start this run as a subprocess for a multi-threaded run",
  'v:' => "\tverbosity - 0=none 1=some 2=more 3=debug",
  'r:' => "\truntime - run time in seconds",
);


$Usage="   Devity HTTP Stress Program
       by Louy of Devity.com

command line usage: http_stress (options)

";
foreach($parameters as $k=>$v){
	$k2=str_replace(":","",$k);
	$v2=str_replace(":","",$v);
	$Usage.=" -${k2}, --${v2}\t".$flag_help_lines[$k]."\n";
}



$options = _getopt(implode('', array_keys($parameters)),$parameters);
$pruneargv = array();
foreach ($options as $option => $value) {
  foreach ($argv as $key => $chunk) {
    $regex = '/^'. (isset($option[1]) ? '--' : '-') . $option . '/';
    if ($chunk == $value && $argv[$key-1][0] == '-' || preg_match($regex, $chunk)) {
      array_push($pruneargv, $key);
    }
  }
}
while ($key = array_pop($pruneargv)){
	deleteFromArray($argv,$key,FALSE,TRUE);
}


$IsSubprocess=FALSE;
foreach (array_keys($options) as $opt) switch ($opt) {
	case 'h':
  	case 'help':
  		print $Usage;
		$DidSomething=TRUE;
		break;
	case 'q':
	case 'quiet':
		$Verbosity=0;
		break;
	case 't':
		$Threads=$options['t'];
		if($Verbosity>=2) print "# Threads set to $Threads\n";
		break;
	case 'threads':
		$Threads=$options['threads'];
		if($Verbosity>=2) print "# Threads set to $Threads\n";
		break;
	case 's':
	case 'subprocess':
		$IsSubprocess=TRUE;
		$Log=$ThreadLog;
		if($Verbosity>=2) print "IsSubprocess set to TRUE\n";
		break;
	case 'v':
		$Verbosity=$options['v'];
		if($Verbosity>=2) print "Verbosity set to $Verbosity\n";
		break;
	case 'verbosity':
		$Verbosity=$options['verbosity'];
		if($Verbosity>=2) print "Verbosity set to $Verbosity\n";
		break;
	case 'r':
		$RunTime=$options['r'];
		if($Verbosity>=2) print "RunTime set to $RunTime\n";
		break;
	case 'runtime':
		$RunTime=$options['runtime'];
		if($Verbosity>=2) print "RunTime set to $RunTime\n";
		break;

}


if($DidSomething){
	exit();
}
if($Verbosity>=2){
	print "Script: $Script\n";
}

$End=$Start+$RunTime;
$StartLoad=get_load();
  


$URLsRaw=`cat $In`;
$URLsArray=split("\n",$URLsRaw);
$URLnum=sizeof($URLsArray);

if($Verbosity>=2){
	print "Starting Stress with $URLnum URLs.\n";
	if($Verbosity>=3) print_r($URLsArray);
	print "Threads=$Threads\n";
	print "IsSubprocess=".debug_tostring($IsSubprocess)."\n";
}


if($Threads>0 && !$IsSubprocess){
	print "Starting in multi-threaded mode. # Threads=$Threads\n";
	if(file_exists($ThreadLog)){
		`rm $ThreadLog`;
		`touch $ThreadLog`;
	}
}else{
	print "Starting in single-threaded mode.\n";
	
}

//exit();


if($Threads>0 && !$IsSubprocess){
	//start processes
	if($Verbosity>=2) print "Starting $Threads processes.\n";
	for($i=0;$i<$Threads;$i++){
		if($Verbosity>=2) print " Starting process #".($i+1).".\n";
		$amp='&';
		$cmd="$Script -subprocess -r $RunTime -v $Verbosity >/dev/null 2>&1 $amp";
		system($cmd);
	}
	
	if($Verbosity>=2) print "Done starting processes.\n";
	
	
	
	$Done=FALSE;
	while(!$Done){
		
		sleep(2);
		
		if(file_exists($ThreadLog)){
			$ThreadsDone=intval(trim(`wc -l $ThreadLog`));
			$Done=($ThreadsDone==$Threads);
		}else{
			$ThreadsDone=0;	
		}
	
		
		cbp_screen_clear();
		sbp_cursor_postion(0,0);
		
		
		print "$ThreadsDone threads out of $Threads total reported results so far.\n";
		
		$ActualRunTime=time()-$Start;
		$TimeLeft=$RunTime-$ActualRunTime;
		print "Goal Run Time: $RunTime seconds\n";
		print "Actual Run Time: $ActualRunTime seconds\n";
		print "Run Time Left: $TimeLeft seconds\n";
	}
	
	cbp_screen_clear();
	sbp_cursor_postion(0,0);
	
	
	//show results
	$Totals_array=array();
	$Results=`cat $ThreadLog`;
	$Results_array=split("\n",$Results);
	$i=1;
	foreach($Results_array as $Result){
		if($Result){
			$Result_array=split(":",$Result);
			print "#$i  ";
			foreach($Result_array as $Result_part){
				$Result_part_array=split("=",$Result_part);
				$name=$Result_part_array[0];
				$value=$Result_part_array[1];
				if($name!="runstart" && $name!="runlength"){
					print "$name: $value  ";
					$Totals_array[$name]+=$value;
				}
			}
			print "\n";
			$i++;
		}
	}
	//print_r($Totals_array);
	
	
	$Loads=$Totals_array[loads];
	$TotalSize=$Totals_array[sizetotal];
	
	$EndLoad=get_load();
	$ActualRunTime=time()-$Start;
	
	print "Goal Run Time: $RunTime seconds\n";
	print "Actual Run Time: $ActualRunTime seconds\n";
	print "Server Load: at start: $StartLoad at end: $EndLoad\n";
	print "Page Loads: $Loads\n";
	$LoadsPerSecond=number_format($Loads/$RunTime,2);
	print "Loads per Second: $LoadsPerSecond\n";
	$AvgLoadTime=number_format($RunTime/$Loads,2);
	print "Avg Load Time: $AvgLoadTime seconds\n";
	$AvgSizeRaw=$TotalSize/$Loads;
	$AvgSize=number_format($TotalSize/$Loads,0);
	print "Avg Size: $AvgSize Bytes\n";
	$TotalSizeStr=number_format($TotalSize,0);
	print "Total Data Received: $TotalSizeStr Bytes\n";
	$Mbps=( ($TotalSize*8) / (1024*1024) ) /$RunTime;
	$MbpsStr=number_format( ($Mbps) ,3);
	print "Avg Download Rate: $MbpsStr Mb/s\n";
	$ActualRunTime=time()-$Start;
		
	
	$log_line="threads=$Threads:runstart=$Start:runlength=$RunTime:actualruntime=$ActualRunTime:loadstart=$StartLoad:loadend=$EndLoad:loads=$Loads:lps=$LoadsPerSecond:sizeavg=$AvgSizeRaw:sizetotal=$TotalSize:Mbps=$Mbps";
	print `echo $log_line >> $Log`;
	//print `echo $log_line`;
	

}else{

	
	
	$Loads=0;
	$TotalSize=0;
	while(time()<$End){
		
		$URL="http://www.batteriesdirect.com/";
		$URL=trim($URLsArray[rand(0,$URLnum-1)]);
		if($URL!=""){
		$r=`wget -q -O - $URL`;
		$Size=strlen($r);
		$TotalSize+=$Size;
		$Loads++;
		$TimeLeft=($End)-time();
		cbp_screen_clear();
	        sbp_cursor_postion(0,0);
		$LastLoad=$Load;
		$Load=get_load();
		$TimeIn=time()-$Start;
		print "Loads: $Loads     Time Left: $TimeLeft    Loading Now: $URL  \n";
		print "Strss Run Time: $RunTime seconds\n";
		print "Server Load: at start: $StartLoad   now: $Load\n";
		print "Page Loads: $Loads\n";
		$LoadsPerSecond=number_format($Loads/$TimeIn,2);
		print "Loads per Second: $LoadsPerSecond\n";
		$AvgLoadTime=number_format($TimeIn/$Loads,2);
		print "Avg Load Time: $AvgLoadTime seconds\n";
		$AvgSize=number_format($TotalSize/$Loads,0);
		print "Avg Size: $AvgSize Bytes\n";
		$TotalSizeStr=number_format($TotalSize,0);
		print "Total Data Received: $TotalSizeStr Bytes\n";
		$MbpsStr=number_format( ( ($TotalSize*8) / (1024*1024) ) /$TimeIn,3);
		print "Avg Download Rate: $MbpsStr Mb/s\n";
	
		while( !(strstr($r,"\n")===FALSE))	$r=str_replace("\n","",$r);
		while( !(strstr($r," ")===FALSE))       $r=str_replace(" ","",$r);
		while( !(strstr($r,"\t")===FALSE))       $r=str_replace("\t","",$r);
		while( !(stristr($r,"&nbsp;")===FALSE))       $r=str_ireplace("&nbsp;","",$r);
		print "\n".substr($r,0,11000);
		}
	}
	
	cbp_screen_clear();
	sbp_cursor_postion(0,0);
	$EndLoad=get_load();
	
	print "Strss Run Time: $RunTime seconds\n";
	print "Server Load: at start: $StartLoad at end: $EndLoad\n";
	print "Page Loads: $Loads\n";
	$LoadsPerSecond=number_format($Loads/$TimeIn,2);
	print "Loads per Second: $LoadsPerSecond\n";
	$AvgLoadTime=number_format($TimeIn/$Loads,2);
	print "Avg Load Time: $AvgLoadTime secondsn";
	$AvgSizeRaw=$TotalSize/$Loads;
	$AvgSize=number_format($TotalSize/$Loads,0);
	print "Avg Size: $AvgSize Bytes\n";
	$TotalSizeStr=number_format($TotalSize,0);
	print "Total Data Received: $TotalSizeStr Bytes\n";
	$Mbps=( ($TotalSize*8) / (1024*1024) ) /$TimeIn;
	$MbpsStr=number_format( ($Mbps),3);
	print "Avg Download Rate: $MbpsStr Mb/s\n";
	$ActualRunTime=time()-$Start;
	
	$log_line="runstart=$Start:runlength=$RunTime:actualruntime=$ActualRunTime:loadstart=$StartLoad:loadend=$EndLoad:loads=$Loads:lps=$LoadsPerSecond:sizeavg=$AvgSizeRaw:sizetotal=$TotalSize:Mbps=$Mbps";
	print `echo $log_line >> $Log`;
	print `echo $log_line`;

}


if($Threads>0 && !$IsSubprocess){
	if(file_exists($ThreadLog)){
		`rm $ThreadLog`;
	}
}

exit();

/* ************************** FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS ************************ */

function str_compare_count_matching_prefix_chars($a,$b){
	$al=strlen($a); $bl=strlen($b);
	//print "a=$a b=$b\n\n";
	$s=0;
	for($c=0;$c<=$al &&$c<=$bl;$c++){
		if($a[$c]==" " && $b[$c]==" "){
			$s=$c+1;
		}
		if($a[$c]!=$b[$c]){
			return $s;
		}
	}
	if($al<$bl){
		return $al;
	}else{
		return $bl;
	}
}



function remove_duplicate_lines($Lines){
	$out=array();
	foreach(split("\n",$Lines) as $Line){
		$Found=FALSE;
		for($i=0;$i<sizeof($out);$i++){
			if($out[$i]==$Line){
				$Found=TRUE;		
			}
		}
		if(!$Found){
			$out[]=$Line;
		}
	}
	$Out2="";
	foreach($out as $Line){
		if($Out2){
			$Out2.="\n";
		}
		$Out2.=$Line;
	}
	return $Out2;
}




function combine_sameprefixed_lines($LogsCombined){
	global $NumberOfBytesSameLimit;
	$Out="";
	$c=0;
	$LastText="";
	foreach(split("\n",$LogsCombined) as $Line){
		$lpa=split(" ",$Line);
		$Date="$lpa[0] $lpa[1] $lpa[2]";
		$Text=substr($Line,strlen($Date)+1);
		$NumberOfBytesSame=str_compare_count_matching_prefix_chars($Text,$LastText);
		if($Text==$LastText){
		}elseif($NumberOfBytesSame>$NumberOfBytesSameLimit){
			$LineNewPart=substr($Line,$NumberOfBytesSame);
			$Out.= ",& $LineNewPart";
			$LastLine="";
			$LastDate="";
			$LastText="";
		}elseif(!(strstr($Line,"ast message repeated")===FALSE)){
		}else{
			if($Line!=""){
				$c++;
				$Out.= "\n$Line";
				$LastLine=$Line;
				$LastDate=$Date;
				$LastText=$Text;
			}
		}
	}
	return $Out;
}





/*
* This function deletes the given element from a one-dimension array
* Parameters: $array:    the array (in/out)
*             $deleteIt: the value which we would like to delete
*             $useOldKeys: if it is false then the function will re-index the array (from 0, 1, ...)
*                          if it is true: the function will keep the old keys
*				$useDeleteItAsIndex: uses deleteIt for compare against array index/key instead of values
* Returns true, if this value was in the array, otherwise false (in this case the array is same as before)
*/
function deleteFromArray(&$array, $deleteIt, $useOldKeys = FALSE, $useDeleteItAsIndex=FALSE ){
    $tmpArray = array();
    $found = FALSE;
   // print "array="; print_r($array); print "\n";
    foreach($array as $key => $value)
    {
    	//print "k=$key v=$value \n";
        if($useDeleteItAsIndex){
        	$Match=($key !== $deleteIt)==TRUE;
        }else{
        	$Match=($value !== $deleteIt)==TRUE;
        }
        
        if($Match){
        	if($useOldKeys){
        	    $tmpArray[$key] = $value;
            }else{
                $tmpArray[] = $value;
            }
        }else{
            $found = TRUE;
        }
    }
    $array = $tmpArray;
    return $found;
}





function sbp_cursor_postion($L=0,$C=0){
        print "\033[${L};${C}H";
}
function cbp_screen_clear(){
        print "\033[2J";
}
function cbp_cursor_left($N=1){
        print "\033[${N}D";
}
function cbp_cursor_up($N=1){
        print "\033[${N}A";
}

function get_load(){	
	$this_loadavg=`cat /proc/loadavg`;
	if($this_loadavg!=""){  
		$loadaggA=split("	",$this_loadavg);
		return number_format($loadaggA[0],3);
	}
	return -1;
}


//////////////////////////////////////////////////////////////////////////////////////////

function _getopt ( ) {

/* _getopt(): Ver. 1.3      2009/05/30
   My page: http://www.ntu.beautifulworldco.com/weblog/?p=526

Usage: _getopt ( [$flag,] $short_option [, $long_option] );

Note that another function split_para() is required, which can be found in the same
page.

_getopt() fully simulates getopt() which is described at
http://us.php.net/manual/en/function.getopt.php , including long options for PHP
version under 5.3.0. (Prior to 5.3.0, long options was only available on few systems)

Besides legacy usage of getopt(), I also added a new option to manipulate your own
argument lists instead of those from command lines. This new option can be a string
or an array such as 

$flag = "-f value_f -ab --required 9 --optional=PK --option -v test -k";
or
$flag = array ( "-f", "value_f", "-ab", "--required", "9", "--optional=PK", "--option" );

So there are four ways to work with _getopt(),

1. _getopt ( $short_option );

  it's a legacy usage, same as getopt ( $short_option ).

2. _getopt ( $short_option, $long_option );

  it's a legacy usage, same as getopt ( $short_option, $long_option ).

3. _getopt ( $flag, $short_option );

  use your own argument lists instead of command line arguments.

4. _getopt ( $flag, $short_option, $long_option );

  use your own argument lists instead of command line arguments.

*/

  if ( func_num_args() == 1 ) {
     $flag =  $flag_array = $GLOBALS['argv'];
     $short_option = func_get_arg ( 0 );
     $long_option = array ();
  } else if ( func_num_args() == 2 ) {
     if ( is_array ( func_get_arg ( 1 ) ) ) {
        $flag = $GLOBALS['argv'];
        $short_option = func_get_arg ( 0 );
        $long_option = func_get_arg ( 1 );
     } else {
        $flag = func_get_arg ( 0 );
        $short_option = func_get_arg ( 1 );
        $long_option = array ();
     }
  } else if ( func_num_args() == 3 ) {
     $flag = func_get_arg ( 0 );
     $short_option = func_get_arg ( 1 );
     $long_option = func_get_arg ( 2 );
  } else {
     exit ( "wrong options\n" );
  }

  $short_option = trim ( $short_option );

  $short_no_value = array();
  $short_required_value = array();
  $short_optional_value = array();
  $long_no_value = array();
  $long_required_value = array();
  $long_optional_value = array();
  $options = array();

  for ( $i = 0; $i < strlen ( $short_option ); ) {
     if ( $short_option{$i} != ":" ) {
        if ( $i == strlen ( $short_option ) - 1 ) {
          $short_no_value[] = $short_option{$i};
          break;
        } else if ( $short_option{$i+1} != ":" ) {
          $short_no_value[] = $short_option{$i};
          $i++;
          continue;
        } else if ( $short_option{$i+1} == ":" && $short_option{$i+2} != ":" ) {
          $short_required_value[] = $short_option{$i};
          $i += 2;
          continue;
        } else if ( $short_option{$i+1} == ":" && $short_option{$i+2} == ":" ) {
          $short_optional_value[] = $short_option{$i};
          $i += 3;
          continue;
        }
     } else {
        continue;
     }
  }

  foreach ( $long_option as $a ) {
     if ( substr( $a, -2 ) == "::" ) {
        $long_optional_value[] = substr( $a, 0, -2);
        continue;
     } else if ( substr( $a, -1 ) == ":" ) {
        $long_required_value[] = substr( $a, 0, -1 );
        continue;
     } else {
        $long_no_value[] = $a;
        continue;
     }
  }

  if ( is_array ( $flag ) )
     $flag_array = $flag;
  else {
     $flag = "- $flag";
     $flag_array = split_para( $flag );
  }

  for ( $i = 0; $i < count( $flag_array ); ) {

     if ( $i >= count ( $flag_array ) )
        break;

     if ( ! $flag_array[$i] || $flag_array[$i] == "-" ) {
        $i++;
        continue;
     }

     if ( $flag_array[$i]{0} != "-" ) {
        $i++;
        continue;

     }

     if ( substr( $flag_array[$i], 0, 2 ) == "--" ) {

        if (strpos($flag_array[$i], '=') != false) {
          list($key, $value) = explode('=', substr($flag_array[$i], 2), 2);
          if ( in_array ( $key, $long_required_value ) || in_array ( $key, $long_optional_value ) )
             $options[$key][] = $value;
          $i++;
          continue;
        }

        if (strpos($flag_array[$i], '=') == false) {
          $key = substr( $flag_array[$i], 2 );
          if ( in_array( substr( $flag_array[$i], 2 ), $long_required_value ) ) {
             $options[$key][] = $flag_array[$i+1];
             $i += 2;
             continue;
          } else if ( in_array( substr( $flag_array[$i], 2 ), $long_optional_value ) ) {
             if ( $flag_array[$i+1] != "" && $flag_array[$i+1]{0} != "-" ) {
                $options[$key][] = $flag_array[$i+1];
                $i += 2;
             } else {
                $options[$key][] = FALSE;
                $i ++;
             }
             continue;
          } else if ( in_array( substr( $flag_array[$i], 2 ), $long_no_value ) ) {
             $options[$key][] = FALSE;
             $i++;
             continue;
          } else {
             $i++;
             continue;
          }
        }

     } else if ( $flag_array[$i]{0} == "-" && $flag_array[$i]{1} != "-" ) {

        for ( $j=1; $j < strlen($flag_array[$i]); $j++ ) {
          if ( in_array( $flag_array[$i]{$j}, $short_required_value ) || in_array( $flag_array[$i]{$j}, $short_optional_value )) {

             if ( $j == strlen($flag_array[$i]) - 1  ) {
                if ( in_array( $flag_array[$i]{$j}, $short_required_value ) ) {
                  $options[$flag_array[$i]{$j}][] = $flag_array[$i+1];
                  $i += 2;
                } else if ( in_array( $flag_array[$i]{$j}, $short_optional_value ) && $flag_array[$i+1] != "" && $flag_array[$i+1]{0} != "-" ) {
                  $options[$flag_array[$i]{$j}][] = $flag_array[$i+1];
                  $i += 2;
                } else {
                  $options[$flag_array[$i]{$j}][] = FALSE;
                  $i ++;
                }
                $plus_i = 0;
                break;
             } else {
                $options[$flag_array[$i]{$j}][] = substr ( $flag_array[$i], $j + 1 );
                $i ++;
                $plus_i = 0;
                break;
             }

          } else if ( in_array ( $flag_array[$i]{$j}, $short_no_value ) ) {

             $options[$flag_array[$i]{$j}][] = FALSE;
             $plus_i = 1;
             continue;

          } else {
             $plus_i = 1;
             break;
          }
        }

        $i += $plus_i;
        continue;

     }

     $i++;
     continue;
  }

  foreach ( $options as $key => $value ) {
     if ( count ( $value ) == 1 ) {
        $options[ $key ] = $value[0];

     }

  }

  return $options;

}

function split_para ( $pattern ) {

/* split_para() version 1.0      2008/08/19
   My page: http://www.ntu.beautifulworldco.com/weblog/?p=526

This function is to parse parameters and split them into smaller pieces.
preg_split() does similar thing but in our function, besides "space", we
also take the three symbols " (double quote), '(single quote),
and \ (backslash) into consideration because things in a pair of " or '
should be grouped together.

As an example, this parameter list

-f "test 2" -ab --required "t\"est 1" --optional="te'st 3" --option -v 'test 4'

will be splited into

-f
t"est 2
-ab
--required
test 1
--optional=te'st 3
--option
-v
test 4

see the code below,

$pattern = "-f \"test 2\" -ab --required \"t\\\"est 1\" --optional=\"te'st 3\" --option -v 'test 4'";

$result = split_para( $pattern );

echo "ORIGINAL PATTERN: $pattern\n\n";

var_dump( $result );

*/

  $begin=0;
  $backslash = 0;
  $quote = "";
  $quote_mark = array();
  $result = array();

  $pattern = trim ( $pattern );

  for ( $end = 0; $end < strlen ( $pattern ) ; ) {

     if ( ! in_array ( $pattern{$end}, array ( " ", "\"", "'", "\\" ) ) ) {
        $backslash = 0;
        $end ++;
        continue;
     }

     if ( $pattern{$end} == "\\" ) {
        $backslash++;
        $end ++;
        continue;
     } else if ( $pattern{$end} == "\"" ) {
        if ( $backslash % 2 == 1 || $quote == "'" ) {
          $backslash = 0;
          $end ++;
          continue;
        }

        if ( $quote == "" ) {
          $quote_mark[] = $end - $begin;
          $quote = "\"";
        } else if ( $quote == "\"" ) {
          $quote_mark[] = $end - $begin;
          $quote = "";
        }

        $backslash = 0;
        $end ++;
        continue;
     } else if ( $pattern{$end} == "'" ) {
        if ( $backslash % 2 == 1 || $quote == "\"" ) {
          $backslash = 0;
          $end ++;
          continue;
        }

        if ( $quote == "" ) {
          $quote_mark[] = $end - $begin;
          $quote = "'";
        } else if ( $quote == "'" ) {
          $quote_mark[] = $end - $begin;
          $quote = "";
        }

        $backslash = 0;
        $end ++;
        continue;
     } else if ( $pattern{$end} == " " ) {
        if ( $quote != "" ) {
          $backslash = 0;
          $end ++;
          continue;
        } else {
          $backslash = 0;
          $cand = substr( $pattern, $begin, $end-$begin );
          for ( $j = 0; $j < strlen ( $cand ); $j ++ ) {
             if ( in_array ( $j, $quote_mark ) )
                continue;

             $cand1 .= $cand{$j};
          }
          if ( $cand1 ) {
             eval( "\$cand1 = \"$cand1\";" );
             $result[] = $cand1;
          }
          $quote_mark = array();
          $cand1 = "";
          $end ++;
          $begin = $end;
          continue;
       }
     }
  }

  $cand = substr( $pattern, $begin, $end-$begin );
  for ( $j = 0; $j < strlen ( $cand ); $j ++ ) {
     if ( in_array ( $j, $quote_mark ) )
        continue;

     $cand1 .= $cand{$j};
  }

  eval( "\$cand1 = \"$cand1\";" );

  if ( $cand1 )
     $result[] = $cand1;

  return $result;
}
////////////////////////////////////////////////////////////////////////////////////

function debug_tostring(&$var){
	global $vars;
	global $debug_tostring_indent;
	global $debug_tostring_full_name;
	global $debug_tostring_output_txt;
	$tbr="";
	if(is_array($var)){
		//$tbr.="<div style='border:1px dotted black;margin-left:10px;'>";
	}
	//call to debug_tostring()=<br>
	if(is_array($var) && !$debug_tostring_output_txt){
		$tbr.="<table border=1 cellspacing=0 cellpadding=0><tr><td valign=top>";
	}
	$var_name=variable_name($var);
	if(!$var_name){
		$var_name="variable";
	}else{
		if((!$debug_tostring_output_txt) && (!(is_array($var)) && $debug_tostring_indent)){
			$tbr.="<b>"."$".$var_name."</b>";
		}
		$debug_tostring_full_name=$var_name;
	}
	if(is_bool($var)){
		if($var==TRUE){
			$var_str="TRUE";
		}else{
			$var_str="FALSE";
		}
		$tbr.="(boolean)=".$var_str;
	}elseif(is_float($var)){
		$tbr.="(float)=".$var;
	}elseif(is_int($var)){
		$tbr.="(integer)=".$var;
	}elseif(is_string($var)){
		
			$var=str_replace("INSERT INTO","<font color=green><b>INSERT</b></font> INTO",$var);
			$var=str_replace("DELETE FROM","<font color=green><b>DELETE</b></font> FROM",$var);
			$var=str_replace("UPDATE ","<font color=green><b>UPDATE</b></font> ",$var);
		$tbr.="(string)=\"".$var."\"";
	}elseif(is_array($var)){
		/*
		$tbr.="(array)={<br>";
		//".$var;
		$tmp_indent=$debug_tostring_indent;
		$debug_tostring_full_name_t=$debug_tostring_full_name;
		$debug_tostring_indent.="&nbsp;";
		foreach($var as $i=>$v){
			$debug_tostring_full_name=$debug_tostring_full_name_t."[".$i."]";
			$tbr.="<font style='font-size:7pt;'>"."$"."$debug_tostring_full_name</font>";
			$tbr.="".debug_tostring($var[$i]);
			
		}
		$debug_tostring_full_name=$debug_tostring_full_name_t;
		$debug_tostring_indent=$tmp_indent;
		//$tbr.="}<br>";
		*/
		if(!$debug_tostring_output_txt){
			$tbr.="</td><td valign=top>";
		}
		//		$tbr.="(array)={<br>";
		//".$var;
		$tmp_indent=$debug_tostring_indent;
		$debug_tostring_full_name_t=$debug_tostring_full_name;
		$debug_tostring_indent.="&nbsp;";
		$first=true;
		foreach($var as $i=>$v){
			if($first){
				$debug_tostring_full_name="";
				$debug_tostring_full_name.=$debug_tostring_full_name_t;
				if(!$debug_tostring_output_txt){
					$debug_tostring_full_name.="</td><td valign=top>";
				}
				$debug_tostring_full_name.="[".$i."]";
				$first=false;
			}else{
				$debug_tostring_full_name="[".$i."]";
			}
			if(!is_array($v)){
				$tbr.="$debug_tostring_full_name";
			}
			$value=debug_tostring($var[$i]);
			$full_var_name=$debug_tostring_full_name_t."[".$i."]";
			//$value="<table width=100% border=1 cellpadding=0 cellspacing=0 style='display:inline;margin:7px; border: 1px solid red;'><tr><td>$value</td><td align=right>$full_var_name</td></tr></table>";
			$tbr.="".$value;
			//<font style='font-size:7pt;'>
		}
		$debug_tostring_full_name=$debug_tostring_full_name_t;
		$debug_tostring_indent=$tmp_indent;
		//$tbr.="}<br>";
		
		
		//
		
		
	}elseif(is_int($var)){
		$tbr.="(int)=".$var;
	}elseif(is_null($var)){
		$tbr.="(null)=".$var;
	}elseif(is_resource($var)){
		$tbr.="(resource)=".$var;
	}elseif(is_scalar($var)){
		$tbr.="(scalar)=".$var;
	}elseif(is_object($var)){
		$tbr.="(object)=?"; // =".$var;
	}elseif(is_numeric($var)){
		$tbr.="(numeric)=".$var;
	}else{
		if(!$debug_tostring_output_txt){
			$tbr.="<b><font color=red>(unknown_type)</font></b>=".$var;
		}else{
			$tbr.="(unknown_type)=".$var;
		}
	}
	if(is_array($var)){
	//	$tbr.="</div>";
	}else{
		if(!$debug_tostring_output_txt){
			$tbr.="<br>";
		}else{
			//$tbr.="\n";
		}
	}
	if(is_array($var) && (!$debug_tostring_output_txt) ){
		$tbr.="</td></tr></table>";
	}
	/*
(
get_class() - Returns the name of the class of an object
function_exists() - Return TRUE if the given function has been defined
method_exists() - C
	
	function unserialize2array($data) { 
    $obj = unserialize($data); 
    if(is_array($obj)) return $obj; 
    $arr = array(); 
    foreach($obj as $k=>$v) { 
        $arr[$k] = $v; 
    } 
    unset($arr['__PHP_Incomplete_Class_Name']); 
    return $arr; 
} 
	
	
	
	*/
	return $tbr;
}	
function variable_name( &$var, $scope=false, $prefix='UNIQUE', $suffix='VARIABLE' ){
    if($scope) {
        $vals = $scope;
    } else {
        $vals = $GLOBALS;
    }
    $old = $var;
    $var = $new = $prefix.rand().$suffix;
    $vname = FALSE;
    foreach($vals as $key => $val) {
        if($val === $new) $vname = $key;
    }
    $var = $old;
    return $vname;
}


?>
